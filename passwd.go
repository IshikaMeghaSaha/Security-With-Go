package main

import (
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"io"
	"os"
)

func printUsage() {
	fmt.Println("Usage:" + os.Args[0] + "<password>")
	fmt.Println("Example:" + os.Args[0] + "Password!")
}

func Check() string {
	if len(os.Args) < 2 {
		printUsage()
		os.Exit(1)
	}
	return os.Args[1]
}

var secret_key = "tyr456eyuygjhgjhliuyig5346546" //Secret key for HMAC

func generateSalt() string {
	randomBytes := make([]byte, 64) //Generates random 64-byte salt
	_, err := rand.Read(randomBytes)
	if err != nil {
		return ""
	}
	return base64.URLEncoding.EncodeToString(randomBytes)
}

func hashPassword(plainText string, salt string) string {
	hash := hmac.New(sha256.New, []byte(secret_key)) //Hash-based Message Authentication Code (HMAC)
	io.WriteString(hash, plainText+salt)
	hashVal := hash.Sum(nil) //Combines password,salt and hash generated by secret key
	return hex.EncodeToString(hashVal)
}

func main() {
	//Take password as input from CLI
	password := Check()
	salt := generateSalt()
	hashedPassword := hashPassword(password, salt)
	fmt.Println("Hashed Password : " + hashedPassword)
}
